type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

type AggregateCategory {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateImageData {
  count: Int!
}

type AggregateReport {
  count: Int!
}

type AggregateSynthesization {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVoiceData {
  count: Int!
}

type AggregateWork {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  name: String!
  works(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String!
  works: WorkCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutWorksInput {
  create: CategoryCreateWithoutWorksInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutWorksInput {
  id: ID
  name: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  name: String
  works: WorkUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateOneRequiredWithoutWorksInput {
  create: CategoryCreateWithoutWorksInput
  update: CategoryUpdateWithoutWorksDataInput
  upsert: CategoryUpsertWithoutWorksInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutWorksDataInput {
  name: String
}

input CategoryUpsertWithoutWorksInput {
  update: CategoryUpdateWithoutWorksDataInput!
  create: CategoryCreateWithoutWorksInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  works_every: WorkWhereInput
  works_some: WorkWhereInput
  works_none: WorkWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  content: String!
  user: User!
  work: Work!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  content: String!
  user: UserCreateOneWithoutCommentsInput!
  work: WorkCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutWorkInput {
  create: [CommentCreateWithoutWorkInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutUserInput {
  id: ID
  content: String!
  work: WorkCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutWorkInput {
  id: ID
  content: String!
  user: UserCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  work: WorkUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  content: String
}

input CommentUpdateManyMutationInput {
  content: String
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutWorkInput {
  create: [CommentCreateWithoutWorkInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutWorkInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutWorkInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutUserDataInput {
  content: String
  work: WorkUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutWorkDataInput {
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpdateWithWhereUniqueWithoutWorkInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutWorkDataInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentUpsertWithWhereUniqueWithoutWorkInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutWorkDataInput!
  create: CommentCreateWithoutWorkInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  user: UserWhereInput
  work: WorkWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type ImageData {
  id: ID!
  fileUrl: String!
  work: Work!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageDataConnection {
  pageInfo: PageInfo!
  edges: [ImageDataEdge]!
  aggregate: AggregateImageData!
}

input ImageDataCreateInput {
  id: ID
  fileUrl: String!
  work: WorkCreateOneWithoutImageDatasInput!
}

input ImageDataCreateManyWithoutWorkInput {
  create: [ImageDataCreateWithoutWorkInput!]
  connect: [ImageDataWhereUniqueInput!]
}

input ImageDataCreateWithoutWorkInput {
  id: ID
  fileUrl: String!
}

type ImageDataEdge {
  node: ImageData!
  cursor: String!
}

enum ImageDataOrderByInput {
  id_ASC
  id_DESC
  fileUrl_ASC
  fileUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImageDataPreviousValues {
  id: ID!
  fileUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ImageDataScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fileUrl: String
  fileUrl_not: String
  fileUrl_in: [String!]
  fileUrl_not_in: [String!]
  fileUrl_lt: String
  fileUrl_lte: String
  fileUrl_gt: String
  fileUrl_gte: String
  fileUrl_contains: String
  fileUrl_not_contains: String
  fileUrl_starts_with: String
  fileUrl_not_starts_with: String
  fileUrl_ends_with: String
  fileUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ImageDataScalarWhereInput!]
  OR: [ImageDataScalarWhereInput!]
  NOT: [ImageDataScalarWhereInput!]
}

type ImageDataSubscriptionPayload {
  mutation: MutationType!
  node: ImageData
  updatedFields: [String!]
  previousValues: ImageDataPreviousValues
}

input ImageDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageDataWhereInput
  AND: [ImageDataSubscriptionWhereInput!]
  OR: [ImageDataSubscriptionWhereInput!]
  NOT: [ImageDataSubscriptionWhereInput!]
}

input ImageDataUpdateInput {
  fileUrl: String
  work: WorkUpdateOneRequiredWithoutImageDatasInput
}

input ImageDataUpdateManyDataInput {
  fileUrl: String
}

input ImageDataUpdateManyMutationInput {
  fileUrl: String
}

input ImageDataUpdateManyWithoutWorkInput {
  create: [ImageDataCreateWithoutWorkInput!]
  delete: [ImageDataWhereUniqueInput!]
  connect: [ImageDataWhereUniqueInput!]
  set: [ImageDataWhereUniqueInput!]
  disconnect: [ImageDataWhereUniqueInput!]
  update: [ImageDataUpdateWithWhereUniqueWithoutWorkInput!]
  upsert: [ImageDataUpsertWithWhereUniqueWithoutWorkInput!]
  deleteMany: [ImageDataScalarWhereInput!]
  updateMany: [ImageDataUpdateManyWithWhereNestedInput!]
}

input ImageDataUpdateManyWithWhereNestedInput {
  where: ImageDataScalarWhereInput!
  data: ImageDataUpdateManyDataInput!
}

input ImageDataUpdateWithoutWorkDataInput {
  fileUrl: String
}

input ImageDataUpdateWithWhereUniqueWithoutWorkInput {
  where: ImageDataWhereUniqueInput!
  data: ImageDataUpdateWithoutWorkDataInput!
}

input ImageDataUpsertWithWhereUniqueWithoutWorkInput {
  where: ImageDataWhereUniqueInput!
  update: ImageDataUpdateWithoutWorkDataInput!
  create: ImageDataCreateWithoutWorkInput!
}

input ImageDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fileUrl: String
  fileUrl_not: String
  fileUrl_in: [String!]
  fileUrl_not_in: [String!]
  fileUrl_lt: String
  fileUrl_lte: String
  fileUrl_gt: String
  fileUrl_gte: String
  fileUrl_contains: String
  fileUrl_not_contains: String
  fileUrl_starts_with: String
  fileUrl_not_starts_with: String
  fileUrl_ends_with: String
  fileUrl_not_ends_with: String
  work: WorkWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ImageDataWhereInput!]
  OR: [ImageDataWhereInput!]
  NOT: [ImageDataWhereInput!]
}

input ImageDataWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createImageData(data: ImageDataCreateInput!): ImageData!
  updateImageData(data: ImageDataUpdateInput!, where: ImageDataWhereUniqueInput!): ImageData
  updateManyImageDatas(data: ImageDataUpdateManyMutationInput!, where: ImageDataWhereInput): BatchPayload!
  upsertImageData(where: ImageDataWhereUniqueInput!, create: ImageDataCreateInput!, update: ImageDataUpdateInput!): ImageData!
  deleteImageData(where: ImageDataWhereUniqueInput!): ImageData
  deleteManyImageDatas(where: ImageDataWhereInput): BatchPayload!
  createReport(data: ReportCreateInput!): Report!
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
  updateManyReports(data: ReportUpdateManyMutationInput!, where: ReportWhereInput): BatchPayload!
  upsertReport(where: ReportWhereUniqueInput!, create: ReportCreateInput!, update: ReportUpdateInput!): Report!
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteManyReports(where: ReportWhereInput): BatchPayload!
  createSynthesization(data: SynthesizationCreateInput!): Synthesization!
  updateSynthesization(data: SynthesizationUpdateInput!, where: SynthesizationWhereUniqueInput!): Synthesization
  updateManySynthesizations(data: SynthesizationUpdateManyMutationInput!, where: SynthesizationWhereInput): BatchPayload!
  upsertSynthesization(where: SynthesizationWhereUniqueInput!, create: SynthesizationCreateInput!, update: SynthesizationUpdateInput!): Synthesization!
  deleteSynthesization(where: SynthesizationWhereUniqueInput!): Synthesization
  deleteManySynthesizations(where: SynthesizationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVoiceData(data: VoiceDataCreateInput!): VoiceData!
  updateVoiceData(data: VoiceDataUpdateInput!, where: VoiceDataWhereUniqueInput!): VoiceData
  updateManyVoiceDatas(data: VoiceDataUpdateManyMutationInput!, where: VoiceDataWhereInput): BatchPayload!
  upsertVoiceData(where: VoiceDataWhereUniqueInput!, create: VoiceDataCreateInput!, update: VoiceDataUpdateInput!): VoiceData!
  deleteVoiceData(where: VoiceDataWhereUniqueInput!): VoiceData
  deleteManyVoiceDatas(where: VoiceDataWhereInput): BatchPayload!
  createWork(data: WorkCreateInput!): Work!
  updateWork(data: WorkUpdateInput!, where: WorkWhereUniqueInput!): Work
  updateManyWorks(data: WorkUpdateManyMutationInput!, where: WorkWhereInput): BatchPayload!
  upsertWork(where: WorkWhereUniqueInput!, create: WorkCreateInput!, update: WorkUpdateInput!): Work!
  deleteWork(where: WorkWhereUniqueInput!): Work
  deleteManyWorks(where: WorkWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  imageData(where: ImageDataWhereUniqueInput!): ImageData
  imageDatas(where: ImageDataWhereInput, orderBy: ImageDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageData]!
  imageDatasConnection(where: ImageDataWhereInput, orderBy: ImageDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageDataConnection!
  report(where: ReportWhereUniqueInput!): Report
  reports(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report]!
  reportsConnection(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReportConnection!
  synthesization(where: SynthesizationWhereUniqueInput!): Synthesization
  synthesizations(where: SynthesizationWhereInput, orderBy: SynthesizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Synthesization]!
  synthesizationsConnection(where: SynthesizationWhereInput, orderBy: SynthesizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SynthesizationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  voiceData(where: VoiceDataWhereUniqueInput!): VoiceData
  voiceDatas(where: VoiceDataWhereInput, orderBy: VoiceDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VoiceData]!
  voiceDatasConnection(where: VoiceDataWhereInput, orderBy: VoiceDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoiceDataConnection!
  work(where: WorkWhereUniqueInput!): Work
  works(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work]!
  worksConnection(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkConnection!
  node(id: ID!): Node
}

type Report {
  id: ID!
  reason: String!
  user: User!
  work: Work!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReportConnection {
  pageInfo: PageInfo!
  edges: [ReportEdge]!
  aggregate: AggregateReport!
}

input ReportCreateInput {
  id: ID
  reason: String!
  user: UserCreateOneWithoutReportsInput!
  work: WorkCreateOneWithoutReportsInput!
}

input ReportCreateManyWithoutUserInput {
  create: [ReportCreateWithoutUserInput!]
  connect: [ReportWhereUniqueInput!]
}

input ReportCreateManyWithoutWorkInput {
  create: [ReportCreateWithoutWorkInput!]
  connect: [ReportWhereUniqueInput!]
}

input ReportCreateWithoutUserInput {
  id: ID
  reason: String!
  work: WorkCreateOneWithoutReportsInput!
}

input ReportCreateWithoutWorkInput {
  id: ID
  reason: String!
  user: UserCreateOneWithoutReportsInput!
}

type ReportEdge {
  node: Report!
  cursor: String!
}

enum ReportOrderByInput {
  id_ASC
  id_DESC
  reason_ASC
  reason_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReportPreviousValues {
  id: ID!
  reason: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReportScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReportScalarWhereInput!]
  OR: [ReportScalarWhereInput!]
  NOT: [ReportScalarWhereInput!]
}

type ReportSubscriptionPayload {
  mutation: MutationType!
  node: Report
  updatedFields: [String!]
  previousValues: ReportPreviousValues
}

input ReportSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReportWhereInput
  AND: [ReportSubscriptionWhereInput!]
  OR: [ReportSubscriptionWhereInput!]
  NOT: [ReportSubscriptionWhereInput!]
}

input ReportUpdateInput {
  reason: String
  user: UserUpdateOneRequiredWithoutReportsInput
  work: WorkUpdateOneRequiredWithoutReportsInput
}

input ReportUpdateManyDataInput {
  reason: String
}

input ReportUpdateManyMutationInput {
  reason: String
}

input ReportUpdateManyWithoutUserInput {
  create: [ReportCreateWithoutUserInput!]
  delete: [ReportWhereUniqueInput!]
  connect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ReportScalarWhereInput!]
  updateMany: [ReportUpdateManyWithWhereNestedInput!]
}

input ReportUpdateManyWithoutWorkInput {
  create: [ReportCreateWithoutWorkInput!]
  delete: [ReportWhereUniqueInput!]
  connect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutWorkInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutWorkInput!]
  deleteMany: [ReportScalarWhereInput!]
  updateMany: [ReportUpdateManyWithWhereNestedInput!]
}

input ReportUpdateManyWithWhereNestedInput {
  where: ReportScalarWhereInput!
  data: ReportUpdateManyDataInput!
}

input ReportUpdateWithoutUserDataInput {
  reason: String
  work: WorkUpdateOneRequiredWithoutReportsInput
}

input ReportUpdateWithoutWorkDataInput {
  reason: String
  user: UserUpdateOneRequiredWithoutReportsInput
}

input ReportUpdateWithWhereUniqueWithoutUserInput {
  where: ReportWhereUniqueInput!
  data: ReportUpdateWithoutUserDataInput!
}

input ReportUpdateWithWhereUniqueWithoutWorkInput {
  where: ReportWhereUniqueInput!
  data: ReportUpdateWithoutWorkDataInput!
}

input ReportUpsertWithWhereUniqueWithoutUserInput {
  where: ReportWhereUniqueInput!
  update: ReportUpdateWithoutUserDataInput!
  create: ReportCreateWithoutUserInput!
}

input ReportUpsertWithWhereUniqueWithoutWorkInput {
  where: ReportWhereUniqueInput!
  update: ReportUpdateWithoutWorkDataInput!
  create: ReportCreateWithoutWorkInput!
}

input ReportWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  user: UserWhereInput
  work: WorkWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
}

input ReportWhereUniqueInput {
  id: ID
}

enum Role {
  ADMIN
  CARETAKER
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  imageData(where: ImageDataSubscriptionWhereInput): ImageDataSubscriptionPayload
  report(where: ReportSubscriptionWhereInput): ReportSubscriptionPayload
  synthesization(where: SynthesizationSubscriptionWhereInput): SynthesizationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  voiceData(where: VoiceDataSubscriptionWhereInput): VoiceDataSubscriptionPayload
  work(where: WorkSubscriptionWhereInput): WorkSubscriptionPayload
}

type Synthesization {
  id: ID!
  progress: Int!
  source: String!
  result: String!
  user: User!
  work: Work!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SynthesizationConnection {
  pageInfo: PageInfo!
  edges: [SynthesizationEdge]!
  aggregate: AggregateSynthesization!
}

input SynthesizationCreateInput {
  id: ID
  progress: Int!
  source: String!
  result: String!
  user: UserCreateOneWithoutSynthesizationsInput!
  work: WorkCreateOneWithoutSynthesizationsInput!
}

input SynthesizationCreateManyWithoutUserInput {
  create: [SynthesizationCreateWithoutUserInput!]
  connect: [SynthesizationWhereUniqueInput!]
}

input SynthesizationCreateManyWithoutWorkInput {
  create: [SynthesizationCreateWithoutWorkInput!]
  connect: [SynthesizationWhereUniqueInput!]
}

input SynthesizationCreateWithoutUserInput {
  id: ID
  progress: Int!
  source: String!
  result: String!
  work: WorkCreateOneWithoutSynthesizationsInput!
}

input SynthesizationCreateWithoutWorkInput {
  id: ID
  progress: Int!
  source: String!
  result: String!
  user: UserCreateOneWithoutSynthesizationsInput!
}

type SynthesizationEdge {
  node: Synthesization!
  cursor: String!
}

enum SynthesizationOrderByInput {
  id_ASC
  id_DESC
  progress_ASC
  progress_DESC
  source_ASC
  source_DESC
  result_ASC
  result_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SynthesizationPreviousValues {
  id: ID!
  progress: Int!
  source: String!
  result: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SynthesizationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  progress: Int
  progress_not: Int
  progress_in: [Int!]
  progress_not_in: [Int!]
  progress_lt: Int
  progress_lte: Int
  progress_gt: Int
  progress_gte: Int
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SynthesizationScalarWhereInput!]
  OR: [SynthesizationScalarWhereInput!]
  NOT: [SynthesizationScalarWhereInput!]
}

type SynthesizationSubscriptionPayload {
  mutation: MutationType!
  node: Synthesization
  updatedFields: [String!]
  previousValues: SynthesizationPreviousValues
}

input SynthesizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SynthesizationWhereInput
  AND: [SynthesizationSubscriptionWhereInput!]
  OR: [SynthesizationSubscriptionWhereInput!]
  NOT: [SynthesizationSubscriptionWhereInput!]
}

input SynthesizationUpdateInput {
  progress: Int
  source: String
  result: String
  user: UserUpdateOneRequiredWithoutSynthesizationsInput
  work: WorkUpdateOneRequiredWithoutSynthesizationsInput
}

input SynthesizationUpdateManyDataInput {
  progress: Int
  source: String
  result: String
}

input SynthesizationUpdateManyMutationInput {
  progress: Int
  source: String
  result: String
}

input SynthesizationUpdateManyWithoutUserInput {
  create: [SynthesizationCreateWithoutUserInput!]
  delete: [SynthesizationWhereUniqueInput!]
  connect: [SynthesizationWhereUniqueInput!]
  set: [SynthesizationWhereUniqueInput!]
  disconnect: [SynthesizationWhereUniqueInput!]
  update: [SynthesizationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SynthesizationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SynthesizationScalarWhereInput!]
  updateMany: [SynthesizationUpdateManyWithWhereNestedInput!]
}

input SynthesizationUpdateManyWithoutWorkInput {
  create: [SynthesizationCreateWithoutWorkInput!]
  delete: [SynthesizationWhereUniqueInput!]
  connect: [SynthesizationWhereUniqueInput!]
  set: [SynthesizationWhereUniqueInput!]
  disconnect: [SynthesizationWhereUniqueInput!]
  update: [SynthesizationUpdateWithWhereUniqueWithoutWorkInput!]
  upsert: [SynthesizationUpsertWithWhereUniqueWithoutWorkInput!]
  deleteMany: [SynthesizationScalarWhereInput!]
  updateMany: [SynthesizationUpdateManyWithWhereNestedInput!]
}

input SynthesizationUpdateManyWithWhereNestedInput {
  where: SynthesizationScalarWhereInput!
  data: SynthesizationUpdateManyDataInput!
}

input SynthesizationUpdateWithoutUserDataInput {
  progress: Int
  source: String
  result: String
  work: WorkUpdateOneRequiredWithoutSynthesizationsInput
}

input SynthesizationUpdateWithoutWorkDataInput {
  progress: Int
  source: String
  result: String
  user: UserUpdateOneRequiredWithoutSynthesizationsInput
}

input SynthesizationUpdateWithWhereUniqueWithoutUserInput {
  where: SynthesizationWhereUniqueInput!
  data: SynthesizationUpdateWithoutUserDataInput!
}

input SynthesizationUpdateWithWhereUniqueWithoutWorkInput {
  where: SynthesizationWhereUniqueInput!
  data: SynthesizationUpdateWithoutWorkDataInput!
}

input SynthesizationUpsertWithWhereUniqueWithoutUserInput {
  where: SynthesizationWhereUniqueInput!
  update: SynthesizationUpdateWithoutUserDataInput!
  create: SynthesizationCreateWithoutUserInput!
}

input SynthesizationUpsertWithWhereUniqueWithoutWorkInput {
  where: SynthesizationWhereUniqueInput!
  update: SynthesizationUpdateWithoutWorkDataInput!
  create: SynthesizationCreateWithoutWorkInput!
}

input SynthesizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  progress: Int
  progress_not: Int
  progress_in: [Int!]
  progress_not_in: [Int!]
  progress_lt: Int
  progress_lte: Int
  progress_gt: Int
  progress_gte: Int
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  user: UserWhereInput
  work: WorkWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SynthesizationWhereInput!]
  OR: [SynthesizationWhereInput!]
  NOT: [SynthesizationWhereInput!]
}

input SynthesizationWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  imageUrl: String!
  role: Role!
  works(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work!]
  liked(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work!]
  favourited(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work!]
  reports(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  synthesizations(where: SynthesizationWhereInput, orderBy: SynthesizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Synthesization!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  works: WorkCreateManyWithoutUserInput
  liked: WorkCreateManyWithoutLikedByInput
  favourited: WorkCreateManyWithoutFavouritedByInput
  reports: ReportCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowingInput
  synthesizations: SynthesizationCreateManyWithoutUserInput
}

input UserCreateManyWithoutFavouritedInput {
  create: [UserCreateWithoutFavouritedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutLikedInput {
  create: [UserCreateWithoutLikedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReportsInput {
  create: UserCreateWithoutReportsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSynthesizationsInput {
  create: UserCreateWithoutSynthesizationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWorksInput {
  create: UserCreateWithoutWorksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  works: WorkCreateManyWithoutUserInput
  liked: WorkCreateManyWithoutLikedByInput
  favourited: WorkCreateManyWithoutFavouritedByInput
  reports: ReportCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowingInput
  synthesizations: SynthesizationCreateManyWithoutUserInput
}

input UserCreateWithoutFavouritedInput {
  id: ID
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  works: WorkCreateManyWithoutUserInput
  liked: WorkCreateManyWithoutLikedByInput
  reports: ReportCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowingInput
  synthesizations: SynthesizationCreateManyWithoutUserInput
}

input UserCreateWithoutFollowingInput {
  id: ID
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  works: WorkCreateManyWithoutUserInput
  liked: WorkCreateManyWithoutLikedByInput
  favourited: WorkCreateManyWithoutFavouritedByInput
  reports: ReportCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  synthesizations: SynthesizationCreateManyWithoutUserInput
}

input UserCreateWithoutLikedInput {
  id: ID
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  works: WorkCreateManyWithoutUserInput
  favourited: WorkCreateManyWithoutFavouritedByInput
  reports: ReportCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowingInput
  synthesizations: SynthesizationCreateManyWithoutUserInput
}

input UserCreateWithoutReportsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  works: WorkCreateManyWithoutUserInput
  liked: WorkCreateManyWithoutLikedByInput
  favourited: WorkCreateManyWithoutFavouritedByInput
  comments: CommentCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowingInput
  synthesizations: SynthesizationCreateManyWithoutUserInput
}

input UserCreateWithoutSynthesizationsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  works: WorkCreateManyWithoutUserInput
  liked: WorkCreateManyWithoutLikedByInput
  favourited: WorkCreateManyWithoutFavouritedByInput
  reports: ReportCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowingInput
}

input UserCreateWithoutWorksInput {
  id: ID
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  liked: WorkCreateManyWithoutLikedByInput
  favourited: WorkCreateManyWithoutFavouritedByInput
  reports: ReportCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowingInput
  synthesizations: SynthesizationCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  imageUrl_ASC
  imageUrl_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  imageUrl: String!
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
  works: WorkUpdateManyWithoutUserInput
  liked: WorkUpdateManyWithoutLikedByInput
  favourited: WorkUpdateManyWithoutFavouritedByInput
  reports: ReportUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowingInput
  synthesizations: SynthesizationUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
}

input UserUpdateManyWithoutFavouritedInput {
  create: [UserCreateWithoutFavouritedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFavouritedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFavouritedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutLikedInput {
  create: [UserCreateWithoutLikedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReportsInput {
  create: UserCreateWithoutReportsInput
  update: UserUpdateWithoutReportsDataInput
  upsert: UserUpsertWithoutReportsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSynthesizationsInput {
  create: UserCreateWithoutSynthesizationsInput
  update: UserUpdateWithoutSynthesizationsDataInput
  upsert: UserUpsertWithoutSynthesizationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutWorksInput {
  create: UserCreateWithoutWorksInput
  update: UserUpdateWithoutWorksDataInput
  upsert: UserUpsertWithoutWorksInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
  works: WorkUpdateManyWithoutUserInput
  liked: WorkUpdateManyWithoutLikedByInput
  favourited: WorkUpdateManyWithoutFavouritedByInput
  reports: ReportUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowingInput
  synthesizations: SynthesizationUpdateManyWithoutUserInput
}

input UserUpdateWithoutFavouritedDataInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
  works: WorkUpdateManyWithoutUserInput
  liked: WorkUpdateManyWithoutLikedByInput
  reports: ReportUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowingInput
  synthesizations: SynthesizationUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowingDataInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
  works: WorkUpdateManyWithoutUserInput
  liked: WorkUpdateManyWithoutLikedByInput
  favourited: WorkUpdateManyWithoutFavouritedByInput
  reports: ReportUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  synthesizations: SynthesizationUpdateManyWithoutUserInput
}

input UserUpdateWithoutLikedDataInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
  works: WorkUpdateManyWithoutUserInput
  favourited: WorkUpdateManyWithoutFavouritedByInput
  reports: ReportUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowingInput
  synthesizations: SynthesizationUpdateManyWithoutUserInput
}

input UserUpdateWithoutReportsDataInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
  works: WorkUpdateManyWithoutUserInput
  liked: WorkUpdateManyWithoutLikedByInput
  favourited: WorkUpdateManyWithoutFavouritedByInput
  comments: CommentUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowingInput
  synthesizations: SynthesizationUpdateManyWithoutUserInput
}

input UserUpdateWithoutSynthesizationsDataInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
  works: WorkUpdateManyWithoutUserInput
  liked: WorkUpdateManyWithoutLikedByInput
  favourited: WorkUpdateManyWithoutFavouritedByInput
  reports: ReportUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowingInput
}

input UserUpdateWithoutWorksDataInput {
  name: String
  email: String
  password: String
  imageUrl: String
  role: Role
  liked: WorkUpdateManyWithoutLikedByInput
  favourited: WorkUpdateManyWithoutFavouritedByInput
  reports: ReportUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowingInput
  synthesizations: SynthesizationUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutFavouritedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFavouritedDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpdateWithWhereUniqueWithoutLikedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutReportsInput {
  update: UserUpdateWithoutReportsDataInput!
  create: UserCreateWithoutReportsInput!
}

input UserUpsertWithoutSynthesizationsInput {
  update: UserUpdateWithoutSynthesizationsDataInput!
  create: UserCreateWithoutSynthesizationsInput!
}

input UserUpsertWithoutWorksInput {
  update: UserUpdateWithoutWorksDataInput!
  create: UserCreateWithoutWorksInput!
}

input UserUpsertWithWhereUniqueWithoutFavouritedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFavouritedDataInput!
  create: UserCreateWithoutFavouritedInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserUpsertWithWhereUniqueWithoutLikedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedDataInput!
  create: UserCreateWithoutLikedInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  works_every: WorkWhereInput
  works_some: WorkWhereInput
  works_none: WorkWhereInput
  liked_every: WorkWhereInput
  liked_some: WorkWhereInput
  liked_none: WorkWhereInput
  favourited_every: WorkWhereInput
  favourited_some: WorkWhereInput
  favourited_none: WorkWhereInput
  reports_every: ReportWhereInput
  reports_some: ReportWhereInput
  reports_none: ReportWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  synthesizations_every: SynthesizationWhereInput
  synthesizations_some: SynthesizationWhereInput
  synthesizations_none: SynthesizationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type VoiceData {
  id: ID!
  fileUrl: String!
  work: Work!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VoiceDataConnection {
  pageInfo: PageInfo!
  edges: [VoiceDataEdge]!
  aggregate: AggregateVoiceData!
}

input VoiceDataCreateInput {
  id: ID
  fileUrl: String!
  work: WorkCreateOneWithoutVoiceDatasInput!
}

input VoiceDataCreateManyWithoutWorkInput {
  create: [VoiceDataCreateWithoutWorkInput!]
  connect: [VoiceDataWhereUniqueInput!]
}

input VoiceDataCreateWithoutWorkInput {
  id: ID
  fileUrl: String!
}

type VoiceDataEdge {
  node: VoiceData!
  cursor: String!
}

enum VoiceDataOrderByInput {
  id_ASC
  id_DESC
  fileUrl_ASC
  fileUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VoiceDataPreviousValues {
  id: ID!
  fileUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VoiceDataScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fileUrl: String
  fileUrl_not: String
  fileUrl_in: [String!]
  fileUrl_not_in: [String!]
  fileUrl_lt: String
  fileUrl_lte: String
  fileUrl_gt: String
  fileUrl_gte: String
  fileUrl_contains: String
  fileUrl_not_contains: String
  fileUrl_starts_with: String
  fileUrl_not_starts_with: String
  fileUrl_ends_with: String
  fileUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VoiceDataScalarWhereInput!]
  OR: [VoiceDataScalarWhereInput!]
  NOT: [VoiceDataScalarWhereInput!]
}

type VoiceDataSubscriptionPayload {
  mutation: MutationType!
  node: VoiceData
  updatedFields: [String!]
  previousValues: VoiceDataPreviousValues
}

input VoiceDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoiceDataWhereInput
  AND: [VoiceDataSubscriptionWhereInput!]
  OR: [VoiceDataSubscriptionWhereInput!]
  NOT: [VoiceDataSubscriptionWhereInput!]
}

input VoiceDataUpdateInput {
  fileUrl: String
  work: WorkUpdateOneRequiredWithoutVoiceDatasInput
}

input VoiceDataUpdateManyDataInput {
  fileUrl: String
}

input VoiceDataUpdateManyMutationInput {
  fileUrl: String
}

input VoiceDataUpdateManyWithoutWorkInput {
  create: [VoiceDataCreateWithoutWorkInput!]
  delete: [VoiceDataWhereUniqueInput!]
  connect: [VoiceDataWhereUniqueInput!]
  set: [VoiceDataWhereUniqueInput!]
  disconnect: [VoiceDataWhereUniqueInput!]
  update: [VoiceDataUpdateWithWhereUniqueWithoutWorkInput!]
  upsert: [VoiceDataUpsertWithWhereUniqueWithoutWorkInput!]
  deleteMany: [VoiceDataScalarWhereInput!]
  updateMany: [VoiceDataUpdateManyWithWhereNestedInput!]
}

input VoiceDataUpdateManyWithWhereNestedInput {
  where: VoiceDataScalarWhereInput!
  data: VoiceDataUpdateManyDataInput!
}

input VoiceDataUpdateWithoutWorkDataInput {
  fileUrl: String
}

input VoiceDataUpdateWithWhereUniqueWithoutWorkInput {
  where: VoiceDataWhereUniqueInput!
  data: VoiceDataUpdateWithoutWorkDataInput!
}

input VoiceDataUpsertWithWhereUniqueWithoutWorkInput {
  where: VoiceDataWhereUniqueInput!
  update: VoiceDataUpdateWithoutWorkDataInput!
  create: VoiceDataCreateWithoutWorkInput!
}

input VoiceDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fileUrl: String
  fileUrl_not: String
  fileUrl_in: [String!]
  fileUrl_not_in: [String!]
  fileUrl_lt: String
  fileUrl_lte: String
  fileUrl_gt: String
  fileUrl_gte: String
  fileUrl_contains: String
  fileUrl_not_contains: String
  fileUrl_starts_with: String
  fileUrl_not_starts_with: String
  fileUrl_ends_with: String
  fileUrl_not_ends_with: String
  work: WorkWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VoiceDataWhereInput!]
  OR: [VoiceDataWhereInput!]
  NOT: [VoiceDataWhereInput!]
}

input VoiceDataWhereUniqueInput {
  id: ID
}

type Work {
  id: ID!
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: User!
  category: Category!
  imageDatas(where: ImageDataWhereInput, orderBy: ImageDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageData!]
  voiceDatas(where: VoiceDataWhereInput, orderBy: VoiceDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VoiceData!]
  likedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  favouritedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  reports(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  synthesizations(where: SynthesizationWhereInput, orderBy: SynthesizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Synthesization!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WorkConnection {
  pageInfo: PageInfo!
  edges: [WorkEdge]!
  aggregate: AggregateWork!
}

input WorkCreateInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  category: CategoryCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  reports: ReportCreateManyWithoutWorkInput
  comments: CommentCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

input WorkCreateManyWithoutCategoryInput {
  create: [WorkCreateWithoutCategoryInput!]
  connect: [WorkWhereUniqueInput!]
}

input WorkCreateManyWithoutFavouritedByInput {
  create: [WorkCreateWithoutFavouritedByInput!]
  connect: [WorkWhereUniqueInput!]
}

input WorkCreateManyWithoutLikedByInput {
  create: [WorkCreateWithoutLikedByInput!]
  connect: [WorkWhereUniqueInput!]
}

input WorkCreateManyWithoutUserInput {
  create: [WorkCreateWithoutUserInput!]
  connect: [WorkWhereUniqueInput!]
}

input WorkCreateOneWithoutCommentsInput {
  create: WorkCreateWithoutCommentsInput
  connect: WorkWhereUniqueInput
}

input WorkCreateOneWithoutImageDatasInput {
  create: WorkCreateWithoutImageDatasInput
  connect: WorkWhereUniqueInput
}

input WorkCreateOneWithoutReportsInput {
  create: WorkCreateWithoutReportsInput
  connect: WorkWhereUniqueInput
}

input WorkCreateOneWithoutSynthesizationsInput {
  create: WorkCreateWithoutSynthesizationsInput
  connect: WorkWhereUniqueInput
}

input WorkCreateOneWithoutVoiceDatasInput {
  create: WorkCreateWithoutVoiceDatasInput
  connect: WorkWhereUniqueInput
}

input WorkCreateWithoutCategoryInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  reports: ReportCreateManyWithoutWorkInput
  comments: CommentCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

input WorkCreateWithoutCommentsInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  category: CategoryCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  reports: ReportCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

input WorkCreateWithoutFavouritedByInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  category: CategoryCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  reports: ReportCreateManyWithoutWorkInput
  comments: CommentCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

input WorkCreateWithoutImageDatasInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  category: CategoryCreateOneWithoutWorksInput!
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  reports: ReportCreateManyWithoutWorkInput
  comments: CommentCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

input WorkCreateWithoutLikedByInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  category: CategoryCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  reports: ReportCreateManyWithoutWorkInput
  comments: CommentCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

input WorkCreateWithoutReportsInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  category: CategoryCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  comments: CommentCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

input WorkCreateWithoutSynthesizationsInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  category: CategoryCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  reports: ReportCreateManyWithoutWorkInput
  comments: CommentCreateManyWithoutWorkInput
}

input WorkCreateWithoutUserInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  category: CategoryCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  voiceDatas: VoiceDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  reports: ReportCreateManyWithoutWorkInput
  comments: CommentCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

input WorkCreateWithoutVoiceDatasInput {
  id: ID
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  user: UserCreateOneWithoutWorksInput!
  category: CategoryCreateOneWithoutWorksInput!
  imageDatas: ImageDataCreateManyWithoutWorkInput
  likedBy: UserCreateManyWithoutLikedInput
  favouritedBy: UserCreateManyWithoutFavouritedInput
  reports: ReportCreateManyWithoutWorkInput
  comments: CommentCreateManyWithoutWorkInput
  synthesizations: SynthesizationCreateManyWithoutWorkInput
}

type WorkEdge {
  node: Work!
  cursor: String!
}

enum WorkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  visibility_ASC
  visibility_DESC
  views_ASC
  views_DESC
  usage_ASC
  usage_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WorkPreviousValues {
  id: ID!
  name: String!
  description: String!
  visibility: Boolean!
  views: Int!
  usage: Int!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WorkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  visibility: Boolean
  visibility_not: Boolean
  views: Int
  views_not: Int
  views_in: [Int!]
  views_not_in: [Int!]
  views_lt: Int
  views_lte: Int
  views_gt: Int
  views_gte: Int
  usage: Int
  usage_not: Int
  usage_in: [Int!]
  usage_not_in: [Int!]
  usage_lt: Int
  usage_lte: Int
  usage_gt: Int
  usage_gte: Int
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WorkScalarWhereInput!]
  OR: [WorkScalarWhereInput!]
  NOT: [WorkScalarWhereInput!]
}

type WorkSubscriptionPayload {
  mutation: MutationType!
  node: Work
  updatedFields: [String!]
  previousValues: WorkPreviousValues
}

input WorkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkWhereInput
  AND: [WorkSubscriptionWhereInput!]
  OR: [WorkSubscriptionWhereInput!]
  NOT: [WorkSubscriptionWhereInput!]
}

input WorkUpdateInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  category: CategoryUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  reports: ReportUpdateManyWithoutWorkInput
  comments: CommentUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateManyDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
}

input WorkUpdateManyMutationInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
}

input WorkUpdateManyWithoutCategoryInput {
  create: [WorkCreateWithoutCategoryInput!]
  delete: [WorkWhereUniqueInput!]
  connect: [WorkWhereUniqueInput!]
  set: [WorkWhereUniqueInput!]
  disconnect: [WorkWhereUniqueInput!]
  update: [WorkUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [WorkUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [WorkScalarWhereInput!]
  updateMany: [WorkUpdateManyWithWhereNestedInput!]
}

input WorkUpdateManyWithoutFavouritedByInput {
  create: [WorkCreateWithoutFavouritedByInput!]
  delete: [WorkWhereUniqueInput!]
  connect: [WorkWhereUniqueInput!]
  set: [WorkWhereUniqueInput!]
  disconnect: [WorkWhereUniqueInput!]
  update: [WorkUpdateWithWhereUniqueWithoutFavouritedByInput!]
  upsert: [WorkUpsertWithWhereUniqueWithoutFavouritedByInput!]
  deleteMany: [WorkScalarWhereInput!]
  updateMany: [WorkUpdateManyWithWhereNestedInput!]
}

input WorkUpdateManyWithoutLikedByInput {
  create: [WorkCreateWithoutLikedByInput!]
  delete: [WorkWhereUniqueInput!]
  connect: [WorkWhereUniqueInput!]
  set: [WorkWhereUniqueInput!]
  disconnect: [WorkWhereUniqueInput!]
  update: [WorkUpdateWithWhereUniqueWithoutLikedByInput!]
  upsert: [WorkUpsertWithWhereUniqueWithoutLikedByInput!]
  deleteMany: [WorkScalarWhereInput!]
  updateMany: [WorkUpdateManyWithWhereNestedInput!]
}

input WorkUpdateManyWithoutUserInput {
  create: [WorkCreateWithoutUserInput!]
  delete: [WorkWhereUniqueInput!]
  connect: [WorkWhereUniqueInput!]
  set: [WorkWhereUniqueInput!]
  disconnect: [WorkWhereUniqueInput!]
  update: [WorkUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [WorkUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [WorkScalarWhereInput!]
  updateMany: [WorkUpdateManyWithWhereNestedInput!]
}

input WorkUpdateManyWithWhereNestedInput {
  where: WorkScalarWhereInput!
  data: WorkUpdateManyDataInput!
}

input WorkUpdateOneRequiredWithoutCommentsInput {
  create: WorkCreateWithoutCommentsInput
  update: WorkUpdateWithoutCommentsDataInput
  upsert: WorkUpsertWithoutCommentsInput
  connect: WorkWhereUniqueInput
}

input WorkUpdateOneRequiredWithoutImageDatasInput {
  create: WorkCreateWithoutImageDatasInput
  update: WorkUpdateWithoutImageDatasDataInput
  upsert: WorkUpsertWithoutImageDatasInput
  connect: WorkWhereUniqueInput
}

input WorkUpdateOneRequiredWithoutReportsInput {
  create: WorkCreateWithoutReportsInput
  update: WorkUpdateWithoutReportsDataInput
  upsert: WorkUpsertWithoutReportsInput
  connect: WorkWhereUniqueInput
}

input WorkUpdateOneRequiredWithoutSynthesizationsInput {
  create: WorkCreateWithoutSynthesizationsInput
  update: WorkUpdateWithoutSynthesizationsDataInput
  upsert: WorkUpsertWithoutSynthesizationsInput
  connect: WorkWhereUniqueInput
}

input WorkUpdateOneRequiredWithoutVoiceDatasInput {
  create: WorkCreateWithoutVoiceDatasInput
  update: WorkUpdateWithoutVoiceDatasDataInput
  upsert: WorkUpsertWithoutVoiceDatasInput
  connect: WorkWhereUniqueInput
}

input WorkUpdateWithoutCategoryDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  reports: ReportUpdateManyWithoutWorkInput
  comments: CommentUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateWithoutCommentsDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  category: CategoryUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  reports: ReportUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateWithoutFavouritedByDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  category: CategoryUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  reports: ReportUpdateManyWithoutWorkInput
  comments: CommentUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateWithoutImageDatasDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  category: CategoryUpdateOneRequiredWithoutWorksInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  reports: ReportUpdateManyWithoutWorkInput
  comments: CommentUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateWithoutLikedByDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  category: CategoryUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  reports: ReportUpdateManyWithoutWorkInput
  comments: CommentUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateWithoutReportsDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  category: CategoryUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  comments: CommentUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateWithoutSynthesizationsDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  category: CategoryUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  reports: ReportUpdateManyWithoutWorkInput
  comments: CommentUpdateManyWithoutWorkInput
}

input WorkUpdateWithoutUserDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  category: CategoryUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  voiceDatas: VoiceDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  reports: ReportUpdateManyWithoutWorkInput
  comments: CommentUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateWithoutVoiceDatasDataInput {
  name: String
  description: String
  visibility: Boolean
  views: Int
  usage: Int
  imageUrl: String
  user: UserUpdateOneRequiredWithoutWorksInput
  category: CategoryUpdateOneRequiredWithoutWorksInput
  imageDatas: ImageDataUpdateManyWithoutWorkInput
  likedBy: UserUpdateManyWithoutLikedInput
  favouritedBy: UserUpdateManyWithoutFavouritedInput
  reports: ReportUpdateManyWithoutWorkInput
  comments: CommentUpdateManyWithoutWorkInput
  synthesizations: SynthesizationUpdateManyWithoutWorkInput
}

input WorkUpdateWithWhereUniqueWithoutCategoryInput {
  where: WorkWhereUniqueInput!
  data: WorkUpdateWithoutCategoryDataInput!
}

input WorkUpdateWithWhereUniqueWithoutFavouritedByInput {
  where: WorkWhereUniqueInput!
  data: WorkUpdateWithoutFavouritedByDataInput!
}

input WorkUpdateWithWhereUniqueWithoutLikedByInput {
  where: WorkWhereUniqueInput!
  data: WorkUpdateWithoutLikedByDataInput!
}

input WorkUpdateWithWhereUniqueWithoutUserInput {
  where: WorkWhereUniqueInput!
  data: WorkUpdateWithoutUserDataInput!
}

input WorkUpsertWithoutCommentsInput {
  update: WorkUpdateWithoutCommentsDataInput!
  create: WorkCreateWithoutCommentsInput!
}

input WorkUpsertWithoutImageDatasInput {
  update: WorkUpdateWithoutImageDatasDataInput!
  create: WorkCreateWithoutImageDatasInput!
}

input WorkUpsertWithoutReportsInput {
  update: WorkUpdateWithoutReportsDataInput!
  create: WorkCreateWithoutReportsInput!
}

input WorkUpsertWithoutSynthesizationsInput {
  update: WorkUpdateWithoutSynthesizationsDataInput!
  create: WorkCreateWithoutSynthesizationsInput!
}

input WorkUpsertWithoutVoiceDatasInput {
  update: WorkUpdateWithoutVoiceDatasDataInput!
  create: WorkCreateWithoutVoiceDatasInput!
}

input WorkUpsertWithWhereUniqueWithoutCategoryInput {
  where: WorkWhereUniqueInput!
  update: WorkUpdateWithoutCategoryDataInput!
  create: WorkCreateWithoutCategoryInput!
}

input WorkUpsertWithWhereUniqueWithoutFavouritedByInput {
  where: WorkWhereUniqueInput!
  update: WorkUpdateWithoutFavouritedByDataInput!
  create: WorkCreateWithoutFavouritedByInput!
}

input WorkUpsertWithWhereUniqueWithoutLikedByInput {
  where: WorkWhereUniqueInput!
  update: WorkUpdateWithoutLikedByDataInput!
  create: WorkCreateWithoutLikedByInput!
}

input WorkUpsertWithWhereUniqueWithoutUserInput {
  where: WorkWhereUniqueInput!
  update: WorkUpdateWithoutUserDataInput!
  create: WorkCreateWithoutUserInput!
}

input WorkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  visibility: Boolean
  visibility_not: Boolean
  views: Int
  views_not: Int
  views_in: [Int!]
  views_not_in: [Int!]
  views_lt: Int
  views_lte: Int
  views_gt: Int
  views_gte: Int
  usage: Int
  usage_not: Int
  usage_in: [Int!]
  usage_not_in: [Int!]
  usage_lt: Int
  usage_lte: Int
  usage_gt: Int
  usage_gte: Int
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  user: UserWhereInput
  category: CategoryWhereInput
  imageDatas_every: ImageDataWhereInput
  imageDatas_some: ImageDataWhereInput
  imageDatas_none: ImageDataWhereInput
  voiceDatas_every: VoiceDataWhereInput
  voiceDatas_some: VoiceDataWhereInput
  voiceDatas_none: VoiceDataWhereInput
  likedBy_every: UserWhereInput
  likedBy_some: UserWhereInput
  likedBy_none: UserWhereInput
  favouritedBy_every: UserWhereInput
  favouritedBy_some: UserWhereInput
  favouritedBy_none: UserWhereInput
  reports_every: ReportWhereInput
  reports_some: ReportWhereInput
  reports_none: ReportWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  synthesizations_every: SynthesizationWhereInput
  synthesizations_some: SynthesizationWhereInput
  synthesizations_none: SynthesizationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WorkWhereInput!]
  OR: [WorkWhereInput!]
  NOT: [WorkWhereInput!]
}

input WorkWhereUniqueInput {
  id: ID
}
